from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, CallbackContext
from datetime import datetime
import logging

# ---------------------------
#  المتغيرات العامة
# ---------------------------
active_sessions = {}
user_settings = {}

# ---------------------------
#  لوحات المفاتيح
# ---------------------------
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["🚀 بدء الهجوم", "🛑 إيقاف الهجوم"],
            ["✏️ تعديل الرسالة", "📊 الإحصائيات"],
            ["🔙 العودة للخلف"]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_speed_keyboard():
    return ReplyKeyboardMarkup(
        [['🚀 سريع', '⚡ متوسط', '🐢 بطيء']],
        resize_keyboard=True
    )

# ---------------------------
#  معالجة الأوامر
# ---------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    if user_id not in user_settings:
        user_settings[user_id] = {
            'custom_message': '.' * 100,
            'attack_count': 0
        }
    
    await update.message.reply_text(
        f"مرحبًا {user.first_name}! 👾\nاختر أحد الخيارات:",
        reply_markup=get_main_keyboard()
    )

async def handle_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    
    if text == "🔙 العودة للخلف":
        await show_main_menu(update)
    elif text == "🚀 بدء الهجوم":
        await start_attack_flow(update, context)
    elif text == "🛑 إيقاف الهجوم":
        await stop_attack(update, context)
    elif text == "✏️ تعديل الرسالة":
        await request_custom_message(update)
    elif text == "📊 الإحصائيات":
        await show_stats(update)

# ---------------------------
#  دوال الهجوم
# ---------------------------
async def execute_attack(update: Update, context: ContextTypes.DEFAULT_TYPE, speed: str):
    user = update.effective_user
    config = {
        '🚀 سريع': {'delay': 0.3},
        '⚡ متوسط': {'delay': 1.5},
        '🐢 بطيء': {'delay': 3}
    }[speed]
    
    if user.id in active_sessions:
        active_sessions[user.id]['job'].schedule_removal()
    
    job = context.application.job_queue.run_repeating(
        attack_callback,
        interval=config['delay'],
        first=0,
        data={
            'user_id': user.id,
            'message': user_settings[user.id]['custom_message']
        },
        name=str(user.id)
    
    active_sessions[user.id] = {
        'job': job,
        'start_time': datetime.now(),
        'count': 0
    }
    
    await update.message.reply_text(
        f"⚡ تم تفعيل الهجوم ({speed})",
        reply_markup=get_main_keyboard()
    )

async def attack_callback(context: CallbackContext):
    try:
        job = context.job
        user_id = int(job.name)
        message = job.data['message']
        
        await context.bot.send_message(user_id, message)
        active_sessions[user_id]['count'] += 1
        
    except Exception as e:
        logging.error(f"فشل الإرسال: {str(e)}")

# ---------------------------
#  الدوال المساعدة
# ---------------------------
async def show_main_menu(update: Update):
    await update.message.reply_text(
        "القائمة الرئيسية:",
        reply_markup=get_main_keyboard()
    )

async def stop_attack(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in active_sessions:
        active_sessions[user_id]['job'].schedule_removal()
        del active_sessions[user_id]
        await update.message.reply_text("✅ تم إيقاف الهجوم!")
    else:
        await update.message.reply_text("⚠️ لا يوجد هجوم نشط!")

async def request_custom_message(update: Update):
    await update.message.reply_text(
        "📝 أرسل الرسالة الجديدة:",
        reply_markup=ReplyKeyboardRemove()
    )
    user_settings[update.effective_user.id]['awaiting_input'] = True

async def handle_custom_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user_settings.get(user.id, {}).get('awaiting_input'):
        new_message = update.message.text * 100
        user_settings[user.id]['custom_message'] = new_message
        user_settings[user.id]['awaiting_input'] = False
        await update.message.reply_text(
            f"✅ تم تعيين الرسالة:\n{new_message[:50]}...",
            reply_markup=get_main_keyboard()
        )

async def show_stats(update: Update):
    user = update.effective_user
    stats = user_settings.get(user.id, {})
    await update.message.reply_text(
        f"📊 الإحصائيات:\n"
        f"• الهجمات النشطة: {stats.get('attack_count', 0)}\n"
        f"• الرسائل المرسلة: {active_sessions.get(user.id, {}).get('count', 0)}"
    )
